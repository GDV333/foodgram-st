#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Newman —Ç–µ—Å—Ç–æ–≤

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Newman —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install -g newman

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π Postman
cd "$(dirname "$0")"

# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –±–∞–∑—ã (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ -f ../backend/db.sqlite3 ]; then
    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –±–∞–∑—ã..."
    # –ó–∞–ø—É—Å–∫ clear_db.sh - –æ–Ω –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    # –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    bash ./clear_db.sh
    # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    echo "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Å—Ç—É—Ä..."
    (cd ../backend && python manage.py migrate && python manage.py loaddata ../fixtures/dev/ingredients_fixture.json)
    if [ $? -ne 0 ]; then
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–∫—Å—Ç—É—Ä. –¢–µ—Å—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã."
        exit 1
    fi
fi

# –û—á–∏—Å—Ç–∫–∞ Docker –±–∞–∑—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
if command -v docker > /dev/null 2>&1; then
    echo "–û—á–∏—Å—Ç–∫–∞ Docker –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏..."
    (cd ../infra && docker compose exec backend python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
usernames_list = ['vasya.ivanov', 'second-user', 'third-user-username', 'NoEmail', 'NoFirstName', 'NoLastName', 'NoPassword', 'TooLongEmail', 'the-username-that-is-150-characters-long-and-should-not-pass-validation-if-the-serializer-is-configured-correctly-otherwise-the-current-test-will-fail-', 'TooLongFirstName', 'TooLongLastName', 'InvalidU\$ername', 'EmailInUse']
deleted_count, _ = User.objects.filter(username__in=usernames_list).delete()
print(f'üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Docker –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏')
    ") 2>/dev/null || echo "‚ö†Ô∏è  Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
fi

# –ó–∞–ø—É—Å–∫ Newman —Ç–µ—Å—Ç–æ–≤
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Django –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000
# –ï—Å–ª–∏ –≤–∞—à —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º URL –∏–ª–∏ –ø–æ—Ä—Ç—É, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å
# –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Postman —á–µ—Ä–µ–∑ --env-var "host=http://localhost:8000"
echo "–ó–∞–ø—É—Å–∫ Newman —Ç–µ—Å—Ç–æ–≤..."
newman run foodgram.postman_collection.json \
    --reporters cli,junit \
    --reporter-junit-export newman-results.xml

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ Newman
NEWMAN_EXIT_CODE=$?

# –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
echo "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤..."

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –±–∞–∑—ã (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ -f ../backend/db.sqlite3 ]; then
    echo "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –±–∞–∑—ã..."
    bash ./clear_db.sh
fi

# –û—á–∏—Å—Ç–∫–∞ Docker –±–∞–∑—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
if command -v docker > /dev/null 2>&1; then
    echo "–ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Docker –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    (cd ../infra && docker compose exec backend python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
usernames_list = ['vasya.ivanov', 'second-user', 'third-user-username', 'NoEmail', 'NoFirstName', 'NoLastName', 'NoPassword', 'TooLongEmail', 'the-username-that-is-150-characters-long-and-should-not-pass-validation-if-the-serializer-is-configured-correctly-otherwise-the-current-test-will-fail-', 'TooLongFirstName', 'TooLongLastName', 'InvalidU\$ername', 'EmailInUse']
deleted_count, _ = User.objects.filter(username__in=usernames_list).delete()
print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Docker')
    ") 2>/dev/null || echo "‚ö†Ô∏è  Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

echo "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Django, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
# (—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)

echo "Newman —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞: $NEWMAN_EXIT_CODE"
exit $NEWMAN_EXIT_CODE
