from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from django.contrib.auth import get_user_model
from django.http import HttpResponse, Http404
from django.db.models import Sum
from django_filters.rest_framework import DjangoFilterBackend
import logging

from recipes.models import (
    Ingredient, Recipe, Favorite, ShoppingCart, RecipeIngredient
)
from users.models import Subscription
from .serializers import (
    IngredientSerializer, RecipeReadSerializer,
    RecipeWriteSerializer, SubscriptionSerializer,
    CustomUserSerializer, ShortRecipeSerializer, SetAvatarSerializer
)
# from .serializers import ( # Temporarily excluding IngredientSerializer
#     RecipeSerializer,
#     RecipeCreateSerializer, FavoriteSerializer,
#     ShoppingCartSerializer, SubscriptionSerializer, CustomUserSerializer
# )
from .filters import IngredientSearchFilter, RecipeFilter
from .pagination import CustomPageNumberPagination

User = get_user_model()

# –õ–æ–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger = logging.getLogger('api')
recipe_logger = logging.getLogger('recipes')
user_logger = logging.getLogger('users')


class IsAuthorOrReadOnly(permissions.BasePermission):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∞–º–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    """

    def has_object_permission(self, request, view, obj):
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞,
        # –ø–æ—ç—Ç–æ–º—É –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º GET, HEAD –∏–ª–∏ OPTIONS –∑–∞–ø—Ä–æ—Å—ã.
        if request.method in permissions.SAFE_METHODS:
            return True

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É —Ä–µ—Ü–µ–ø—Ç–∞.
        return obj.author == request.user


class IngredientViewSet(viewsets.ReadOnlyModelViewSet):
    """ViewSet –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏."""
    queryset = Ingredient.objects.all()
    serializer_class = IngredientSerializer
    permission_classes = (permissions.AllowAny,)
    filter_backends = (IngredientSearchFilter,)
    pagination_class = None


class RecipeViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏."""
    queryset = Recipe.objects.all()
    permission_classes = (permissions.AllowAny,)  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ, –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∞–µ–º –≤—Ä—É—á–Ω—É—é
    filter_backends = (DjangoFilterBackend,)
    filterset_class = RecipeFilter

    def get_serializer_class(self):
        if self.action in ('create', 'partial_update', 'update'):
            return RecipeWriteSerializer
        return RecipeReadSerializer

    def create(self, request, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (401)
        if not request.user.is_authenticated:
            return Response(
                {"detail": "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã."},
                status=status.HTTP_401_UNAUTHORIZED
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)

    def retrieve(self, request, *args, **kwargs):
        try:
            instance = self.get_object()
            serializer = self.get_serializer(instance)
            return Response(serializer.data)
        except Http404:
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."},
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            return Response(
                {"detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

    def update(self, request, *args, **kwargs):
        print(f"üîç UPDATE: User={request.user.id if request.user.is_authenticated else 'Anonymous'}, Recipe ID={kwargs.get('pk')}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (404)
            instance = self.get_object()
            print(f"üìã Recipe found: ID={instance.id}, Author={instance.author.id}")
        except Http404:
            print("‚ùå Recipe not found - returning 404")
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."},
                status=status.HTTP_404_NOT_FOUND
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (401)
        if not request.user.is_authenticated:
            print("‚ùå User not authenticated - returning 401")
            return Response(
                {"detail": "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã."},
                status=status.HTTP_401_UNAUTHORIZED
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (403)
        if instance.author != request.user:
            print(f"üö´ Permission denied: Recipe author={instance.author.id}, Request user={request.user.id} - returning 403")
            return Response(
                {"detail": "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."},
                status=status.HTTP_403_FORBIDDEN
            )
        
        print("‚úÖ Permission check passed - updating recipe")
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (400)
            partial = kwargs.pop('partial', False)
            serializer = self.get_serializer(
                instance, data=request.data, partial=partial
            )
            serializer.is_valid(raise_exception=True)
            self.perform_update(serializer)
            return Response(serializer.data)
        except Exception as e:
            print(f"üí• Update error: {str(e)}")
            return Response(
                {"detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

    def destroy(self, request, *args, **kwargs):
        print(f"üîç DESTROY: User={request.user.id if request.user.is_authenticated else 'Anonymous'}, Recipe ID={kwargs.get('pk')}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (404)
            instance = self.get_object()
            print(f"üìã Recipe found: ID={instance.id}, Author={instance.author.id}")
        except Http404:
            print("‚ùå Recipe not found - returning 404")
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."},
                status=status.HTTP_404_NOT_FOUND
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (401)
        if not request.user.is_authenticated:
            print("‚ùå User not authenticated - returning 401")
            return Response(
                {"detail": "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã."},
                status=status.HTTP_401_UNAUTHORIZED
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (403)
        if instance.author != request.user:
            print(f"üö´ Permission denied: Recipe author={instance.author.id}, Request user={request.user.id} - returning 403")
            return Response(
                {"detail": "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."},
                status=status.HTTP_403_FORBIDDEN
            )
        
        print("‚úÖ Permission check passed - deleting recipe")
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            self.perform_destroy(instance)
            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            print(f"üí• Destroy error: {str(e)}")
            return Response(
                {"detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

    @action(
        detail=True,
        methods=['post', 'delete'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def favorite(self, request, pk=None):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID —Ä–µ—Ü–µ–ø—Ç–∞
            try:
                recipe_id = int(pk)
            except (ValueError, TypeError):
                return Response(
                    {"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ü–µ–ø—Ç–∞."},
                    status=status.HTTP_400_BAD_REQUEST
                )

            recipe = get_object_or_404(Recipe, pk=recipe_id)

            if request.method == 'POST':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                if Favorite.objects.filter(user=request.user, recipe=recipe).exists():
                    return Response(
                        {"detail": "–†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º."},
                        status=status.HTTP_400_BAD_REQUEST
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                favorite = Favorite.objects.create(user=request.user, recipe=recipe)
                serializer = ShortRecipeSerializer(recipe, context={'request': request})
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            elif request.method == 'DELETE':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                try:
                    favorite = Favorite.objects.get(user=request.user, recipe=recipe)
                    favorite.delete()
                    return Response(status=status.HTTP_204_NO_CONTENT)
                except Favorite.DoesNotExist:
                    return Response(
                        {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º."},
                        status=status.HTTP_400_BAD_REQUEST
                    )

        except Http404:
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."},
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            return Response(
                {"detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

    @action(
        detail=True,
        methods=['post', 'delete'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def shopping_cart(self, request, pk=None):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID —Ä–µ—Ü–µ–ø—Ç–∞
            try:
                recipe_id = int(pk)
            except (ValueError, TypeError):
                return Response(
                    {"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ü–µ–ø—Ç–∞."},
                    status=status.HTTP_400_BAD_REQUEST
                )

            recipe = get_object_or_404(Recipe, pk=recipe_id)

            if request.method == 'POST':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ä–µ—Ü–µ–ø—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
                if ShoppingCart.objects.filter(user=request.user, recipe=recipe).exists():
                    return Response(
                        {"detail": "–†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫."},
                        status=status.HTTP_400_BAD_REQUEST
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫
                cart_item = ShoppingCart.objects.create(user=request.user, recipe=recipe)
                serializer = ShortRecipeSerializer(recipe, context={'request': request})
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            elif request.method == 'DELETE':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–∫—É–ø–æ–∫
                try:
                    cart_item = ShoppingCart.objects.get(
                        user=request.user, recipe=recipe
                    )
                    cart_item.delete()
                    return Response(status=status.HTTP_204_NO_CONTENT)
                except ShoppingCart.DoesNotExist:
                    return Response(
                        {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫."},
                        status=status.HTTP_400_BAD_REQUEST
                    )

        except Http404:
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫."},
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            return Response(
                {"detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

    @action(
        detail=False,
        methods=['get'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def download_shopping_cart(self, request):
        """–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫."""
        try:
            shopping_cart = ShoppingCart.objects.filter(user=request.user)
            recipes = [item.recipe for item in shopping_cart]

            if not recipes:
                return Response(
                    {'errors': '–í —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤'},
                    status=status.HTTP_400_BAD_REQUEST
                )

            ingredients = RecipeIngredient.objects.filter(
                recipe__in=recipes
            ).values(
                'ingredient__name', 'ingredient__measurement_unit'
            ).annotate(
                total_amount=Sum('amount')
            ).order_by('ingredient__name')

            shopping_list = '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n\n'
            for item in ingredients:
                shopping_list += (
                    f"{item['ingredient__name']} "
                    f"({item['ingredient__measurement_unit']}) ‚Äî "
                    f"{item['total_amount']}\n"
                )

            response = HttpResponse(
                shopping_list, content_type='text/plain; charset=utf-8'
            )
            response['Content-Disposition'] = 'attachment; filename="shopping_list.txt"'
            return response
        except Exception as e:
            return Response(
                {'errors': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

    @action(
        detail=True,
        methods=['get'],
        permission_classes=[permissions.AllowAny],
        url_path='get-link'
    )
    def get_link(self, request, pk=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Ü–µ–ø—Ç."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID —Ä–µ—Ü–µ–ø—Ç–∞
            try:
                recipe_id = int(pk)
            except (ValueError, TypeError):
                return Response(
                    {"detail": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ü–µ–ø—Ç–∞."},
                    status=status.HTTP_400_BAD_REQUEST
                )

            recipe = get_object_or_404(Recipe, pk=recipe_id)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É
            short_link = f"{request.build_absolute_uri('/recipes/')}{recipe_id}/"
            return Response({"short-link": short_link})
        except Http404:
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."},
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            return Response(
                {"detail": str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )


class UserViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    queryset = User.objects.all().order_by('id')
    serializer_class = CustomUserSerializer
    permission_classes = (permissions.IsAuthenticatedOrReadOnly,)
    pagination_class = CustomPageNumberPagination

    def get_serializer_class(self):
        """–í—ã–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è."""
        if self.action == 'create':
            from users.serializers import CustomUserCreateSerializer  # Changed import path
            return CustomUserCreateSerializer
        return CustomUserSerializer

    def get_permissions(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        if self.action == 'create':
            permission_classes = [permissions.AllowAny]
        else:
            permission_classes = self.permission_classes
        return [permission() for permission in permission_classes]

    def retrieve(self, request, pk=None):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pk –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
            user_id = int(pk)
            user = get_object_or_404(User, pk=user_id)
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ ID –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, {{userId}}), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400
            return Response(
                {'detail': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
                status=status.HTTP_400_BAD_REQUEST
            )

        serializer = self.get_serializer(user)
        return Response(serializer.data)

    @action(
        detail=False,
        methods=['get'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def me(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        serializer = self.get_serializer(request.user)
        return Response(serializer.data)

    @action(
        detail=False,
        methods=['put', 'delete'],
        permission_classes=[permissions.IsAuthenticated],
        url_path='me/avatar'
    )
    def avatar(self, request):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        if request.method == 'PUT':
            serializer = SetAvatarSerializer(data=request.data)
            if serializer.is_valid():
                request.user.avatar = serializer.validated_data['avatar']
                request.user.save()
                return Response({
                    'avatar': request.user.avatar.url if request.user.avatar else None
                })
            return Response(
                serializer.errors, status=status.HTTP_400_BAD_REQUEST
            )

        elif request.method == 'DELETE':
            if request.user.avatar:
                request.user.avatar.delete()
                request.user.avatar = None
                request.user.save()
            return Response(status=status.HTTP_204_NO_CONTENT)

    @action(
        detail=False,
        methods=['post'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def set_password(self, request):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = request.user
        current_password = request.data.get('current_password')
        new_password = request.data.get('new_password')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not current_password or not new_password:
            return Response(
                {'errors': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
        if not user.check_password(current_password):
            return Response(
                {'errors': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        user.set_password(new_password)
        user.save()

        return Response(status=status.HTTP_204_NO_CONTENT)

    @action(
        detail=True,
        methods=['post', 'delete'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def subscribe(self, request, pk=None):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–≤—Ç–æ—Ä–∞."""
        try:
            author_id = int(pk)
            author = get_object_or_404(User, pk=author_id)
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ ID –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400
            return Response(
                {'errors': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if request.user == author:
            return Response(
                {'errors': '–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if request.method == 'POST':
            subscription, created = Subscription.objects.get_or_create(
                user=request.user, author=author
            )
            if created:
                serializer = SubscriptionSerializer(
                    author, context={'request': request}
                )
                return Response(
                    serializer.data, status=status.HTTP_201_CREATED
                )
            return Response(
                {'errors': '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
                status=status.HTTP_400_BAD_REQUEST
            )

        subscription = Subscription.objects.filter(
            user=request.user, author=author
        ).first()
        if not subscription:
            return Response(
                {'errors': '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
                status=status.HTTP_400_BAD_REQUEST
            )
        subscription.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

    @action(
        detail=False,
        methods=['get'],
        permission_classes=[permissions.IsAuthenticated]
    )
    def subscriptions(self, request):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        authors = User.objects.filter(
            subscribed__user=request.user
        ).order_by('id')

        page = self.paginate_queryset(authors)
        if page is not None:
            serializer = SubscriptionSerializer(
                page, many=True, context={'request': request}
            )
            return self.get_paginated_response(serializer.data)

        serializer = SubscriptionSerializer(
            authors, many=True, context={'request': request}
        )
        return Response(serializer.data)


